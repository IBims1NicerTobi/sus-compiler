

module DUAL_PORT_MEM {
	bool[20][512] mem

	interface write : bool write, bool[20] wr_data, int wr_addr

	interface read : bool read, int rd_addr -> bool[20] rd_data

	if write {
		mem[wr_addr] = wr_data
	}

	if read {
		rd_data = mem[rd_addr]
	}
}

module offset_backwards : bool i'0 -> bool o'-5 {

}

module FIFO {
	gen int BITWIDTH = 20
	gen int DEPTH = 512
	// The FIFO may still receive data for 5 cycles after ready is de-asserted
	gen int ALMOST_FULL_THRESHOLD = 5
	
	interface push : bool push'0, bool[BITWIDTH] data_in -> bool ready'-ALMOST_FULL_THRESHOLD+1
	
	interface pop : bool pop -> bool[BITWIDTH] data_out, bool data_valid

	state bool[BITWIDTH][DEPTH] mem
	state int read_addr
	state int write_addr

	initial read_addr = 0
	initial write_addr = 0


	if pop {
		data_valid = read_addr != write_addr
		if data_valid {
			reg data_out = mem[read_addr]
			read_addr = (read_addr + 1) % DEPTH
		}
	}

	if push {
		mem[write_addr] = data_in
		write_addr = (write_addr + 1) % DEPTH
	}
	
	// Wrapping subtract
	int space_remaining = (read_addr - write_addr) % DEPTH
	reg bool r = space_remaining > ALMOST_FULL_THRESHOLD
	ready = offset_backwards(r)
}
