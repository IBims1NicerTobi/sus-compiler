
// Just a wrapper to reduce IOs for small FPGA synthesis. Barely enough logic to make the optimizer not optimize it out. The proper one requires too many IOs
module BitSerialMatrixMultiplyTinyIO {
    interface BitSerialMatrixMultiplyTinyIO : bool start, bool rst, int value, int addr -> int result

    BitSerialMatrixMultiply bsmm

    state int[10] stored_values
    stored_values[addr] = value
    int[15] r = bsmm(start, stored_values)
    bsmm.rst = rst

    result = r[addr]
}


module BitSerialMatrixMultiply {
    gen int[10][15] MATRIX

    for int X in 0..15 {
        for int Y in 0..10 {
            // Try 1/4 random-ish number generation
            if ((X + Y) * 7 + ((X+1)*10) / (Y+1)) % 4 == 0 {
                MATRIX[X][Y] = (X + 2*Y)
            } else {
                MATRIX[X][Y] = 0
            }
        }
    }
    
    BitSerialMatrixMultiplyTemplate::<WIDTH = 10, HEIGHT = 15, MATRIX = MATRIX;> bsmm

    interface BitSerialMatrixMultiply : bool start, int[10] values -> int[15] result
    input bool rst

    result = bsmm(start, values)
    bsmm.rst = rst
}



module BitSerialMatrixMultiplyTemplate {
    input gen int WIDTH
    input gen int HEIGHT
    
    // 32 right now, because ints are't sized yet. 
    gen int INT_BITWIDTH = 32

    input gen int[WIDTH][HEIGHT] MATRIX

    BitSerialMatrixMultiplyState::<WIDTH, HEIGHT, MATRIX;> bsm_state

    interface BitSerialMatrixMultiplyTemplate : bool start, int[WIDTH] values -> int[HEIGHT] result
    input bool rst

    state bool[WIDTH][INT_BITWIDTH] split_into_bits

    FixedSizeIterator::<UP_TO = INT_BITWIDTH;> iter

    // Explicitly not use value
    int _ = iter.value

    iter.rst = rst

    // This is above start, so start has write priority on split_into_bits. TODO shift down once we have `overwrite`
    if iter.valid {
        // It's a shift register
        for int BIT in 0..INT_BITWIDTH-1 {
            split_into_bits[BIT] = split_into_bits[BIT + 1]
        }

        bsm_state.feed(true, split_into_bits[0])
    } else {
        bsm_state.feed(false, split_into_bits[0])
    }

    result = LatencyOffset::<INT_BITWIDTH;int[HEIGHT]>(bsm_state.finish(iter.last))

    iter.start(start)
    if start {
        // initialize split_into_bits
        for int I in 0..WIDTH {
            bool[INT_BITWIDTH] value_bits = IntToBits(values[I])

            for int BIT in 0..INT_BITWIDTH {
                split_into_bits[BIT][I] = value_bits[BIT]
            }
        }
    }
}

module BitSerialMatrixMultiplyState {
    input gen int WIDTH
    input gen int HEIGHT

    input gen int[WIDTH][HEIGHT] MATRIX

    interface feed : bool feed, bool[WIDTH] vector_bits

    interface finish : bool finish -> state int[HEIGHT] result_vector

    for int Y in 0..HEIGHT {
        initial result_vector[Y] = 0

        BitSerialRow::<SIZE = WIDTH, WEIGHTS = MATRIX[Y];> row

        if feed {
            result_vector[Y] = result_vector[Y] * 2 + row(vector_bits)
        }

        if finish {
            result_vector[Y] = 0
        }
    }
}

module BitSerialRow {
    input gen int SIZE
    input gen int[SIZE] WEIGHTS

    interface BitSerialRow : bool[SIZE] bits'0 -> int row_total

    gen int NONZERO_COUNT = 0
    for int I in 0..SIZE {
        if WEIGHTS[I] != 0 {NONZERO_COUNT = NONZERO_COUNT + 1}
    }

    if NONZERO_COUNT == 0 {
        int zero'0 = 0
        row_total = zero
    } else {
        int[NONZERO_COUNT] nonzero_weights
        gen int CURRENT_NONZERO_COUNT = 0

        for int I in 0..SIZE {
            gen int CUR_WEIGHT = WEIGHTS[I]

            if CUR_WEIGHT != 0 {
                if bits[I] {
                    nonzero_weights[CURRENT_NONZERO_COUNT] = WEIGHTS[I]
                } else {
                    nonzero_weights[CURRENT_NONZERO_COUNT] = 0
                }

                CURRENT_NONZERO_COUNT = CURRENT_NONZERO_COUNT + 1
            }
        }

        row_total = TreeAdd::<NONZERO_COUNT;>(nonzero_weights)
    }
}

