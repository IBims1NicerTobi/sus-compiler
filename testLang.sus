


namespace MyNS

template<WIDTH = 1>
interface ValidStream([WIDTH] data, dataValid)

template<WIDTH = 1, DEPTH_LOG2 = 5>
interface TolerantPipe (
	ValidData data
=>
	[DEPTH_LOG2] spaceRemaining
)

template<WIDTH = 1>
interface AcceptPipe(accept => [WIDTH] data, dataAvailable)

template<WIDTH = 1, LATENCY = 1>
interface RequestPipe(request => ValidStream'LATENCY data)

template<WIDTH = 1, LATENCY = 1, MARGIN = 10>
implicit module toRequestPipe(TolerantPipe<WIDTH> tolerantIn => RequestPipe<WIDTH, LATENCY> requestOut)

if(pIn.spaceRemaining < MARGIN) {
	pOut.request = 0
} else {
	pOut.request = 1
}

pIn.data = pOut.data

endmodule

template<WIDTH = 120, DEPTH = 32>
clocked resettable module FIFO(TolerantPipe writeSide => AcceptPipe readSide)

[clog2(DEPTH)] readAddr : 0
[clog2(DEPTH)] writeAddr : 0
[WIDTH][DEPTH] memory

if(writeSide.writeEnable) {
	writeAddr <' writeAddr + 1
	memory[writeAddr] <' writeSide.data
}
writeSide.spaceRemaining = writeAddr - readAddr

if(readSide.accept) {
	readAddr <' readAddr + 1
}

readSide.dataAvailable = readAddr < writeAddr
readSide.data = memory[readAddr]

endmodule





template<WIDTH = 16, SUMWIDTH = WIDTH>
clocked resettable module Aggregator (
	ValidStream<WIDTH> termStream,
	
	endSum
	
=> 
	ValidStream<SUMWIDTH> sumsOut
)



endmodule










/*
template<WIDTH = 120, DEPTH = 32>
clocked(clk) resettable(async rst) module FIFO (
	writeEnable,
	[WIDTH] dataIn,
	
	readEnable
) => (
	[clog2(DEPTH)] usedw, 
	
	[WIDTH] dataOut,
	empty
)

#ifdef USE_FIFO_IP
scfifo<
	add_ram_output_register = "ON",
	etcetc = "ETC"
> scfifo_component(
	clock = clk,
	sclr = rst,
	data = dataIn,
	rdreq = readEnable,
	wrreq = writeEnable,
	aclr = 1'b0,
) => (
	full,
	empty,
	[WIDTH] dataOut
)

#else

[clog2(DEPTH)] readAddr : 0
[clog2(DEPTH)] writeAddr : 0

[WIDTH][DEPTH] memory

if(writeEnable) {
	memory[writeAddr] <' dataIn
	writeAddr <' writeAddr + 1
}
if(readEnable) {
	dataOut <' memory[readAddr]
	readAddr <' readAddr + 1
}

empty = readAddr == writeAddr
usedw = writeAddr - readAddr

#endif

endmodule

clocked (WriteClk, ReadClk) resettable module DCFIFO(
	
)

endmodule
*/