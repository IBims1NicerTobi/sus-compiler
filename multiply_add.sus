

module multiply : int a, int b -> int r {
	r = a * b;
}

module multiply_add2 : int a, int b, int c -> int r {
    int tmp = multiply(a, b);
	reg r = tmp + c;
}

template<int Size>
module ExactlyOne : bool[Size] inputs -> bool exactlyOne {
	if Size == 0 {
		exactlyOne = false;
	} else if Size == 1 {
	    exactlyOne = inputs[0];
	} else {
	    bool[Size] atLeastOnes;
		bool[Size] atLeastTwos;
		atLeastOnes[0] = inputs[0];
		atLeastTwos[0] = false;
		for i in 1:Size {
			atLeastOnes[i] = atLeastOnes[i-1] | inputs[i];
			atLeastTwos[i] = atLeastTwos[i-1] | atLeastOnes[i-1] & inputs[i];
		}
		exactlyOne = atLeastOnes & !atLeastTwos;
	}
}


module parallel_mul_add_reg : int a, int b -> int p, int q {
    reg int a2 = a * a;
	reg int a3 = a * a2 + 3;
	reg p = a * a3;

	reg int b2 = b + b;
	reg int b3 = b + b2;
	reg q = b + b3;

	// UTF-8 Characters support
	Lööwe 老虎;

	
}


/*
    a
	b
	c
	    tmp
	    result
*/

timeline (v v _ -> _) .. (_ _ v -> v)
module mul_add : int a, int b, int c -> int result {
	reg int tmp = a * b;
	result = tmp + c;
}




/* a module to test the syntax */
module MultiplyAdd : i32 a, i32 b, i32 c -> i32 result {
	// temporary variable
	i32 tmp = a * b;
	result = tmp + cooo * 30 + 5;
	array_subscript = tmp;
	{
		//[
		beep boop;
	}
	@
	int[5] myVar;
	myVar[0] = 0;
	myVar[1] = 1;
	myVar[2] = 2;
	myVar[3] = 3;
	myVar[4] = 4;
	@
}

module beep : i32 a {
	state i32 beep;

	beep = 5;
	# 
	beep = a;
	
}

timeline (a -> r) .. (/ -> r)
module dwiogo : bool[512] data -> bool[256] out {
    state bool[256] save = data[256:511];
	out = data[0:255];
	#
	out = save;
}



timeline (v -> v) .. (/ -> v) .. (/ -> v) .. (/ -> v)
module packer : T[256] data /* v _ _ _ */ -> T[64] out { /* v v v v */
    state bool[256] save = data[256:511];
	out = data[0:255];
	#
	out = save;
}


module multiply_add_old : i32 a, i32 b, i32 c -> i32 result, double double_result {
	i32 tmp = a * b;
	reg result = tmp + c;
	reg double_result = cvt_to_double(result);
}

/*timeline (a -> /) .. (a -> r)*
module blur : i32'0 a -> i32'1 result {
	state int prev = a;
	#
	loop {
		result = @@@@@@(a + prev) / 2; // pipeline stage
		prev = a;
		#   // timeline step
	}
}*/

timeline (a -> /) .. (a -> r)*
module my_complex_operation : i32'0 a -> i32'9 result {
	state prev'0 = a;
	state tmp2'6;
	#
	loop {
		tmp2 = @@@@@@(a + prev) / 2; // pipeline stage
		result = @@@(prev + tmp2);
		prev = a;
		#   // timeline step
	}
}

timeline (a -> /)* .. (/ -> r)
module seq_adder : i32 a -> i32 result {
	state int sum = a;
	#
	loop {
		sum = sum + a;
		#
	}
	result = sum;
}


module exists : hello a -> int result {

}

module hello : int a -> int b {}

module test_exists : -> int result {
	int x = exists(5);
	int b = doesnt_exist(3);
}

module exists : duplicate a {
	// Should be a duplicate of previous exists
}

module use_other_file : int a -> int r {
	r = hello_from_the_other_side(a);
}


interface maemory_read : int addr -> bool[16] data;

//HandShake hs = hs_0;

module test_hs {
	state int st = 5;

	gen if HA_HANDSHAKE {}
	interface hs {

		interface boop {

		}
	};
	interface process : int[10] data -> int[9] data {
	
	}
}

module b: HandShake hs -> {	
	if hs.event {
	
	}
}




module multiply_add : 
	int a,
	int b,
	int c
	-> int total {

	reg int tmp = a * b;
	total = tmp + c;
}

module fibonnaci : -> int num {
	state int current = 1;
	state int current_prev = 0;

	num = current + current_prev;
	current_prev = current;
	current = num;
}

//timeline (v, true -> /) .. (v, false -> v)*
module blur2 : 
	int data,
	bool first
	-> int blurred {
	
	state int prev;

	if !first {
		blurred = data + prev;
	}
	prev = data;
}


module Tree_Multiply : int[4] values -> int total {
    int a = values[0] * values[1];
	int b = values[2] * values[3];
	total = a * b;
}




//timeline (X, false -> /)* .. (X, true -> T)
module Accumulator : int term, bool done -> int total {
    state int tot = 0; // Initial value, not a real assignment

    int new_tot = tot + term;
    if done {
        total = new_tot;
        tot = 0; // Must restore initial conditions
    } else {
        tot = new_tot;
    }
}


//timeline (a, true -> /) | (a, false -> /) .. (a, false -> r)* .. (a, true -> r)
module blur : int a, bool done -> int result {
	state bool working = false; // Initial value, not a real assignment
	state int prev;

	if working {
		reg reg reg result = prev + a; // Add a pipeline stage for shits and giggles
	}
	prev = a;
	working = !done;
}



//timeline (X -> X) .. (/ -> X) .. (/ -> X) .. (/ -> X)
module Unpack4 : int[4] packed -> int out_stream {
    state int st = 0; // Initial value, not a real assignment
    state int[3] stored_packed;

    if st == 0 {
        out_stream = packed[0];
        stored_packed[0] = packed[1]; // Shorthand notation is possible here "stored_packed[0:2] = packed[1:3];"
        stored_packed[1] = packed[2];
        stored_packed[2] = packed[3];
        st = 1;
    } else if st == 1 {
        out_stream = stored_packed[0];
        st = 2;
    } else if st == 2 {
        out_stream = stored_packed[1];
        st = 3;
    } else if st == 3 {
        out_stream = stored_packed[2];
        st = 0; // Must restore initial conditions
        //finish; // packet is hereby finished. 
    }
}

module generative : int in -> int o, int o2 {
	gen int x = 5;
	gen int[x] ys;

	//gen int[ys] zs;

	gen int[3] ps;

	gen int[x] a;

	a[2] = 5;
	a[1] = 2;
	a[0] = 10;
	gen int[3] xx = a;

	gen bool test = true;

	if test {
		
	}

	o = a[in];
	o2 = a[a[0]];
}


//timeline (bs -> /, true) | (bs -> v, false)
module first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros {
	if bits[0] {
		first = 0;
		all_zeros = false;
	} else if bits[1] {
		first = 1;
		all_zeros = false;
	} else if bits[2] {
		first = 2;
		all_zeros = false;
	} else if bits[3] {
		first = 3;
		all_zeros = false;
	} else if bits[4] {
		first = 4;
		all_zeros = false;
	} else if bits[5] {
		first = 5;
		all_zeros = false;
	} else {
		all_zeros = true;
	}

	/*first int i in 0..6 where bits[i] {
		first = i;
		all_zeros = false;
	} else {
		all_zeros = true;
	}*/

}

module first_bit_idx_24 : bool[24] bits -> int first {
	int[4] offsets;
	bool[4] was_nonzero;

	for int i in 0..4 {
		offsets[i], was_nonzero[i] = first_bit_idx_6(bits[i*6+:6]);
	}
}


module permute : bool[128] mbf, int selected_permutation -> bool[128] permuted_mbf {
	// cvt_to_double
	permuted_mbf = mbf;
}

//timeline (X, [false;24], true -> /, false) | (X, vs, true -> X, true) .. (/, /, false -> X, true)*
module permute24 : bool[128] mbf, bool[24] valid_permutes, bool start -> bool[128] permuted_out, bool permuted_out_valid {
	state bool[128] stored_mbf;
	state bool[24] stored_valid_permutes = 000000000000000000000000;

	gen int aaaaa = 5;


	bool[24] permutes_to_keep;
	permutes_to_keep[0] = false;
	for i in 1..24 {
		permutes_to_keep[i] = permutes_to_keep[i-1] | stored_valid_permutes[i-1];
	}

	int current_permutation_idx = first_bit_idx_24(permutes_to_keep);
	
	stored_valid_permutes = stored_valid_permutes & permutes_to_keep;

	permuted_out = permute(stored_mbf, current_permutation_idx);
}
