
module multiply : int a, int b -> int r {
	r = a * b
}

// test
module contains_submodule : int a, int b, int c -> int r {
    int tmp = multiply(a, b)
	reg r = tmp + c
}

template<int Size>     
module ExactlyOne : bool[Size] inputs -> bool exactlyOne {
	if Size == 0 {
		exactlyOne = false
	} else if Size == 1 {
	    exactlyOne = inputs[0]
	} else {
	    bool[Size] atLeastOnes
		bool[Size] atLeastTwos
		atLeastOnes[0] = inputs[0]
		atLeastTwos[0] = false
		for i in 1:Size {
			atLeastOnes[i] = atLeastOnes[i-1] | inputs[i]
			atLeastTwos[i] = atLeastTwos[i-1] | atLeastOnes[i-1] & inputs[i]
		}
		exactlyOne = atLeastOnes & !atLeastTwos
	}
}


module parallel_mul_add_reg : int a, int b -> int p, int q {
    reg int a2 = a * a
	reg int a3 = a * a2 + 3
	reg p = a * a3

	reg int b2 = b + b
	reg int b3 = b + b2
	reg q = b + b3

	// UTF-8 Characters support
	Lööwe 老虎

	
}


/*
    a
	b
	c
	    tmp
	    result
*/

timeline (v v _ -> _) .. (_ _ v -> v)
module mul_add : int a, int b, int c -> int result {
	reg int tmp = a * b
	result = tmp + c
}




/* a module to test the syntax */
module MultiplyAdd : i32 a, i32 b, i32 c -> i32 result {
	// temporary variable
	i32 tmp = a * b
	result = tmp + cooo * 30 + 5
	array_subscript = tmp
	{
		//[
		beep boop
	}
	@
	int[5] myVar
	myVar[0] = 0
	myVar[1] = 1
	myVar[2] = 2
	myVar[3] = 3
	myVar[4] = 4
	@
}

module beep : i32 a {
	state i32 beep

	beep = 5
	# 
	beep = a
	
}

timeline (a -> r) .. (/ -> r)
module dwiogo : bool[512] data -> bool[256] out {
    state bool[256] save = data[256:511]
	out = data[0:255]
	#
	out = save
}



timeline (v, true -> v) .. (/, false -> v) .. (/, false -> v) .. (/, false -> v)
module packer : bool[256] data /* v _ _ _ */, bool valid -> bool[64] o { /* v v v v */
    state bool[192] save = data[64:256]
	state int part
	initial part = 3
	if valid {
		part = 0
		o = data[0:64]
	} else {
		o = save[part*64 - 64:part*64]
		if part < 3 {
			part = part + 1
		}
	}
}


module multiply_add_old : i32 a, i32 b, i32 c -> i32 result, double double_result {
	i32 tmp = a * b
	reg result = tmp + c
	reg double_result = cvt_to_double(result)
}

module exists : hello a -> int result {

}

module hello : int a -> int b {}

module test_exists : -> int result {
	int x = exists(5)
	int b = doesnt_exist(3)
}

module exists : duplicate a {
	// Should be a duplicate of previous exists
}

module use_other_file : int a -> int r {
	r = hello_from_the_other_side(a)
}


interface maemory_read : int addr -> bool[16] data

//HandShake hs = hs_0

module test_hs {
	state int st = 5

	gen if HA_HANDSHAKE {}
	interface hs {

		interface boop {

		}
	}
	interface process : int[10] data -> int[9] data {
	
	}
}

module b: HandShake hs -> {	
	if hs.event {
	
	}
}

module example_md : 
	int[4] factors,
	int add_to ->
	int product, 
	int total {

	reg int mul0 = factors[0] * factors[1]
	reg int mul1 = factors[2] * factors[3]

	reg product = mul0 * mul1
	reg total = product + add_to
}


// (a*b) + c
module multiply_add : 
	int a, int b, int c -> 
	int total {

	reg int tmp = a * b
	total = tmp + c
}


module test_pow17 {
	int a = pow17(2)
}

module pow17 : int i -> int o {
	    int i2  = i   * i
	reg int i4  = i2  * i2
	    int i8  = i4  * i4
	reg int i16 = i8  * i8
	        o   = i16 * i
}


module fibonnaci : -> int num {
	state int cur = 1
	state int prev = 0

	
	num = cur + prev
	prev = cur
	cur = num
}

module blur2 : 
	int data,
	bool first -> 
	int blurred {
	
	state int prev

	if !first {
		blurred = data + prev
	}
	prev = data

	gen int a

	gen bool b = true
	gen bool bb = false

	if bb {
		a = 5
	} else {
		a = 3
	}
}


module Tree_Multiply : int[4] values -> int total {
	reg int a = values[0] * values[1]
	reg int b = values[2] * values[3]
	reg total = a * b
}

module Accumulator : int term, bool done -> int total {
    state int tot
	initial tot = 0

    int new_tot = tot + term
    if done {
        reg total = new_tot
        tot = 0
    } else {
        tot = new_tot
    }
}


//timeline (a, true -> /) | (a, false -> /) .. (a, false -> r)* .. (a, true -> r)
module blur : int a, bool done -> int result {
	state bool working
	initial working = false
	state int prev

	if working {
		reg reg reg result = prev + a // Add a pipeline stage for shits and giggles
	}
	prev = a
	working = !done
}



//timeline (X -> X) .. (/ -> X) .. (/ -> X) .. (/ -> X)
module Unpack4 : int[4] packed -> int out_stream {
    state int st
	initial st = 0
    state int[3] stored_packed

    if st == 0 {
        out_stream = packed[0]
        stored_packed[0] = packed[1] // Shorthand notation is possible here "stored_packed[0:2] = packed[1:3]"
        stored_packed[1] = packed[2]
        stored_packed[2] = packed[3]
        st = 1
    } else if st == 1 {
        out_stream = stored_packed[0]
        st = 2
    } else if st == 2 {
        out_stream = stored_packed[1]
        st = 3
    } else if st == 3 {
        out_stream = stored_packed[2]
        st = 0 // Must restore initial conditions
        //finish // packet is hereby finished. 
    }
}

module generative : int i -> int o, int o2 {
	gen int x = 5
	gen int[x] ys

	//gen int[ys] zs

	gen int[3] ps

	gen int[x] a

	a[2] = 5
	a[1] = 2
	a[0] = 10
	gen int[3] xx = a

	gen bool test = true

	if test {i = 5}

	o = a[i]
	o2 = a[a[0]]
}

module add_indices_to_array : 
	int[10] values -> int[10] added_values {

	for int i in 0..10 {
		int t = values[i]
		added_values[i] = t + i
	}
}

module assignment_producer : -> int v'0, int o'0, bool j'0 {}

module test_various_assignments {
	state int[3] st
	bool b
	reg int a, st[2], reg reg b = assignment_producer()
}

//timeline (bs -> /, true) | (bs -> v, false)
module first_bit_idx_6 : bool[6] bits -> int first, bool all_zeros {
	if bits[0] {
		first = 0
		all_zeros = false
	} else if bits[1] {
		first = 1
		all_zeros = false
	} else if bits[2] {
		first = 2
		all_zeros = false
	} else if bits[3] {
		first = 3
		all_zeros = false
	} else if bits[4] {
		first = 4
		all_zeros = false
	} else if bits[5] {
		first = 5
		all_zeros = false
	} else {
		all_zeros = true
	}

	/*first int i in 0..6 where bits[i] {
		first = i
		all_zeros = false
	} else {
		all_zeros = true
	}*/

}

module multiply_add_with_latencies : int a'0, int b'0, int c'0 -> int r'0 {
    int tmp'1 = multiply(a, b)
	reg r = tmp + c
}

module first_bit_idx_24 : bool[24] bits -> int first {
	int[4] offsets
	bool[4] was_nonzeros

	for int i in 0..4 {
		bool[6] these_bits
		for int j in 0..6 {
			these_bits[j] = bits[i * 6 + j]
		}
		
		int offset, bool was_nonzero = first_bit_idx_6(these_bits)
		offsets[i] = offset
		was_nonzeros[i] = was_nonzero
	}
}

module permute : bool[128] mbf, int selected_permutation -> bool[128] permuted_mbf {
	// cvt_to_double
	permuted_mbf = mbf
}

//timeline (X, [false24], true -> /, false) | (X, vs, true -> X, true) .. (/, /, false -> X, true)*
module permute24 : bool[128] mbf, bool[24] valid_permutes, bool start -> bool[128] permuted_out, bool permuted_out_valid {
	state bool[128] stored_mbf
	state bool[24] stored_valid_permutes = 000000000000000000000000

	gen int aaaaa = 5


	bool[24] permutes_to_keep
	permutes_to_keep[0] = false
	for int i in 1..24 {
		permutes_to_keep[i] = permutes_to_keep[i-1] | stored_valid_permutes[i-1]
	}

	int current_permutation_idx = first_bit_idx_24(permutes_to_keep)
	
	stored_valid_permutes = stored_valid_permutes & permutes_to_keep

	permuted_out = permute(stored_mbf, current_permutation_idx)

	aaaaa()
}



module test_single_wire : int a -> int o {
	o = a
}

module disjoint_ports : int a, int b, int c -> int result {
	reg result = a + b
	// don't touch c
}

module undeteriminable_input_latency : int a, int b -> int x, int y {
	reg int a_d = a
	int t = a_d + b
    reg reg reg int a_dd = a
	reg int t_d = t
    x = t_d + a_dd
    y = t
}

module specified_input_latency : int a'0, int b'1 -> int x, int y {
	reg int a_d = a
    int t = a_d + b
    reg reg reg int a_dd = a
	reg int t_d = t
    x = t_d + a_dd
    y = t
}

module determinable_input_latency : int a, int b -> int x, int y {
	reg int a_d = a
    int t = a_d + b
    reg reg int a_dd = a
	reg int t_d = t
    x = t_d + a_dd
    y = t
}

// This module is a copy of ::undeteriminable_input_latency, but it doesn't have an error, because we just assume the latency of the inner nodes to be the earliest possible. 
module determinable_because_no_input_output_ports : int a -> int x {
	reg int a_d = a
    int t = a_d
    reg reg reg int a_dd = a
	reg int t_d = t
    x = t_d + a_dd
}

// This module is a copy of ::undeteriminable_input_latency, but it doesn't have an error, because we just assume the latency of the inner nodes to be the earliest possible. 
module conflicting_latency_declarations : int a'0 -> int x'1 {
	reg int nio = a
	reg x = nio
}

module bad_cycle : int a -> int r {
	state int state_reg
	initial state_reg = 0

	r = state_reg

	reg state_reg = state_reg + a
}

module module_taking_time : 
	int i'0 -> int o'5 {
	o = i
}

module matrix_vector_mul : 
	int[30][20] mat, int[20] vec -> int[30] result {
	
	for int row in 0..30 {
		int[20] row_products
		for int col in 0..20 {
			row_products[col] = mat[row][col] * vec[col]
		}
		result[row] = +row_products
	}
}

module bad_cycle2 : int a -> int r {
	state int test
	initial test = 0

	test = module_taking_time(test+a)

	r = test
}

module module_taking_a_lot_of_time : int data_in'0 -> int data_out'200 {
	data_out = data_in
}


/*extern*/ module offset_latency : int i'0 -> int o'-5 {

}



module good_cycle : int a -> int r {
	state int test
	initial test = 0
	
	int new_test = test + a
	test = new_test

	r = new_test
}

module input_only : int i {
	state int loop
	initial loop = 0
	loop = loop + i
}

module multiple_inputs_only : int i, int i2 {
	state int loop
	initial loop = 0
	loop = loop + i + i2
}

module output_only : -> int o {
	state int loop
	initial loop = 0
	loop = loop + 1
	reg o = loop
}

module multiple_outputs_only : -> int o, int o2 {
	state int loop
	initial loop = 0
	loop = loop + 1
	reg o = loop
	reg reg o2 = loop
}


// Test submodule comment
module submodule : int a, int b -> int r {
	r = a * b
}

// module doing nothing
module doNothing {}

/*
Multiline

comment

# Test Title

*/
module contains_submodule_submodule : int a, int b, int c -> int r {
	// Temp val
    int tmp = submodule(a, b)
	doNothing()
	reg r = tmp + c
}


module xor : bool x1, bool x2 -> bool y {
	bool w1 = !x1
	bool w2 = !x2

	bool w3 = x1 & w2
	bool w4 = x2 & w1

	y = w3 | w4
}



module fizz_buzz : int v -> int fb {
	gen int FIZZ = 15
	gen int BUZZ = 11
	gen int FIZZ_BUZZ = 1511
	
	bool fizz = v % 3 == 0
	bool buzz = v % 5 == 0
	
	if fizz & buzz {
		fb = FIZZ_BUZZ
	} else if fizz {
		fb = FIZZ
	} else if buzz {
		fb = BUZZ
	} else {
		fb = v
	}
}

module fizz_buzz_gen : int v -> int fb {
	gen int FIZZ = 15
	gen int BUZZ = 11
	gen int FIZZ_BUZZ = 1511
	gen int TABLE_SIZE = 256

	gen int[TABLE_SIZE] lut
	
	for int i in 0..TABLE_SIZE {
		gen bool fizz = i % 3 == 0
		gen bool buzz = i % 5 == 0
		
		gen int tbl_fb
		if fizz & buzz {
			tbl_fb = FIZZ_BUZZ
		} else if fizz {
			tbl_fb = FIZZ
		} else if buzz {
			tbl_fb = BUZZ
		} else {
			tbl_fb = i
		}

		lut[i] = tbl_fb
	}

	fb = lut[v]
}

module mbf_dual : bool[128] mbf -> bool[128] dual {
	for int i in 0..128 {
		dual[i] = !mbf[127-i]
	}
}


module monotonize_down : bool[16] mbf -> bool[16] mtDown {
	bool[16] mbf2
	bool[16] mbf4
	bool[16] mbf8
	
	for int i in 0..16 {
		if i % 2 == 0 {
			mbf2[i] = mbf[i] | mbf[i+1]
		} else {
			mbf2[i] = mbf[i]
		}
	}

	for int i in 0..16 {
		if i % 4 < 2 {
			mbf4[i] = mbf2[i] | mbf2[i+2]
		} else {
			mbf4[i] = mbf2[i]
		}
	}
	
	for int i in 0..16 {
		if i % 8 < 4 {
			mbf8[i] = mbf4[i] | mbf4[i+4]
		} else {
			mbf8[i] = mbf4[i]
		}
	}
	
	for int i in 0..16 {
		if i % 16 < 8 {
			mtDown[i] = mbf8[i] | mbf8[i+8]
		} else {
			mtDown[i] = mbf8[i]
		}
	}
}

// Main module documentation
module submodule_named_ports : int port_a, int port_b -> int port_c {
	port_c = port_a + port_b
}

module use_submodule_named_ports : int i -> int o {
// Test submodule documentation
	submodule_named_ports sm

	o = sm(i, i)

	sm.port_a = i

	sm.port_b = i

	o = sm.port_c
}

module contains_submodule_submodule : int a, int b, int c -> int r {
	// Temp val
    int tmp = submodule(a, b)
	doNothing()
	reg r = tmp + c
}



module cross_int {
	interface in : int i'0
	interface out : -> int o'0
}

module cross_memory {
	interface in : bool[20][512] i'0
	interface out : -> bool[20][512] o'0
}

module offset_backwards : bool i'0 -> bool o'-5 {

}

module DUAL_PORT_MEM {
	state bool[20][512] mem

	interface write : bool write, bool[20] wr_data, int wr_addr

	interface read : bool read, int rd_addr -> bool[20] rd_data

	if write {
		mem[wr_addr] = wr_data
	}

	cross_memory cr_m
	cr_m.i = mem
	if read {
		rd_data = cr_m.o[rd_addr]
	}
}

module FIFO {
	gen int BITWIDTH = 20
	gen int DEPTH = 512
	// The FIFO may still receive data for 5 cycles after ready is de-asserted
	gen int ALMOST_FULL_THRESHOLD = 5
	
	interface push : bool push'0, bool[BITWIDTH] data_in -> bool ready'-ALMOST_FULL_THRESHOLD+1
	
	interface pop : bool pop -> bool[BITWIDTH] data_out, bool data_valid
	
	state bool[BITWIDTH][DEPTH] mem
	state int read_addr
	state int write_addr

	initial read_addr = 0
	initial write_addr = 0

	cross_int write_to_pop
	write_to_pop.i = write_addr

	cross_int read_to_push
	read_to_push.i = read_addr

	cross_memory mem_to_pop
	mem_to_pop.i = mem

	if pop {
		data_valid = read_addr != write_to_pop.o
		if data_valid {
			reg data_out = mem_to_pop.o[read_addr]
			read_addr = (read_addr + 1) % DEPTH
			//write_addr = 1
		}
	}

	if push {
		mem[write_addr] = data_in
		write_addr = (write_addr + 1) % DEPTH
	}
	
	// Wrapping subtract
	int space_remaining = (read_to_push.o - write_addr) % DEPTH
	reg bool r = space_remaining > ALMOST_FULL_THRESHOLD
	ready = offset_backwards(r)
}

module use_fifo {
	FIFO f

}

module test_separated_domain : int main {
	int domain2

	int domain3

	int domain4

	cross_int ci
	ci.i = domain3
	domain4 = ci.o

	int domain5


}

module no_port_module {}

module use_no_input_module {
	no_port_module()

	no_port_module no_port
	no_port()
}

module mod_with_unused_interface {
	if false {
		interface v : int a -> int b
	}
}

module use_bad_interface {
	mod_with_unused_interface mm

	mm.a

	

	// ICE: mm.a = 5
}
